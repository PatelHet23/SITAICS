// generator client{
// provider = "prisma-client-js"
// }

// datasource db{
// provider = "postgresql"
// url      = env("DATABASE_URL")
// }

// model User {
//   id             String          @id @default(uuid())
//   email          String          @unique
//   password       String
//   name           String
//   createdAt      DateTime        @default(now())
//   role           Role
//   updatedAt      DateTime        @updatedAt
//   username       String          @unique
//   isActive       Boolean         @default(true)
//   studentDetails StudentDetails?
// }

// model StudentDetails{
// id                 String    @id @default(uuid())
// email              String
// username           String
// name               String
// enrollmentNumber   String?
// batch              String?
// address            String?
// bloodGroup         String?
// dateOfBirth        DateTime?
// achievements       String?
// contactNumber      String?
// isActive           Boolean   @default(true)
// isProfileCompleted Boolean   @default(false)
// results            Json?
// createdAt          DateTime  @default(now())
// updatedAt          DateTime  @updatedAt
// student            User      @relation(fields: [id], references: [id])
// }
// model Batches{
//   batchId   String   @id @default(uuid())
//   batchName String
//   courseName String
//   batchDuration Int
//   currentSemester Int
//   currentSubjects Int

// }
// model StaffDetails{
//   id                  String    @id @default(uuid())
//   email               String
//   username            String
//   name                String
//   contactuNumber      String?
//   isBatchCoordinator  Boolean     @default(false)
//   achivements         String
//   isActive            Boolean     @default(true)
//   isProfileCompleted  Boolean     @default(false)
//   createdAt           DateTime    @default(now())
//   updatedAt           DateTime    @updatedAt

// }
// enum Role {
//   Admin
//   Staff
//   PO
//   Student
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  name           String
  createdAt      DateTime        @default(now())
  role           Role
  updatedAt      DateTime        @updatedAt
  username       String          @unique
  isActive       Boolean         @default(true)
  studentDetails StudentDetails?
  staffDetails   StaffDetails?
}

model StudentDetails {
  id                 String    @id
  email              String
  username           String
  name               String
  enrollmentNumber   String?
  batch              Batch?    @relation(fields: [batchId], references: [batchId])
  batchId            String?
  results            Json?
  bloodGroup         String?
  dob                DateTime?
  gender             String?
  contactNo          String?
  address            String?
  city               String?
  state              String?
  pinCode            Int?
  achievements       String?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isProfileCompleted Boolean   @default(false)
  user               User      @relation(fields: [id], references: [id])
}

model StaffDetails {
  id                 String    @id
  email              String
  username           String
  name               String
  contactNumber      String?
  isBatchCoordinator Boolean   @default(false)
  batchId            String?
  subjects           Subject[]
  achievements       String?
  isActive           Boolean   @default(true)
  isProfileCompleted Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [id], references: [id])
  batch              Batch?    @relation(fields: [batchId], references: [batchId])
}

model Subject {
  subjectId   String         @id @default(uuid())
  subjectName String
  subjectCode String
  semester    Int
  courseId    String
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  staff       StaffDetails[]
  batches     BatchSubject[]
}

model Course {
  courseId   String    @id @default(uuid())
  courseName String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  batches    Batch[]
}

model Batch {
  batchId         String           @id @default(uuid())
  batchName       String           @unique
  course          Course           @relation(fields: [courseId], references: [courseId])
  courseId        String
  batchDuration   Int
  currentSemester Int
  students        StudentDetails[]
  staffMembers    StaffDetails[]
  subjects        BatchSubject[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model BatchSubject {
  batch     Batch   @relation(fields: [batchId], references: [batchId])
  batchId   String
  subject   Subject @relation(fields: [subjectId], references: [subjectId])
  subjectId String
  semester  Int

  @@id([batchId, subjectId])
}

enum Role {
  Admin
  Staff
  PO
  Student
}
