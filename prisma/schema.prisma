generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LeaveStatus {
  Pending
  Approved
  Rejected
}

model Leave {
  id        String         @id @default(uuid())
  studentId String
  leaveType String
  fromDate  DateTime
  toDate    DateTime
  reason    String
  status    LeaveStatus    @default(Pending)
  student   StudentDetails @relation(fields: [studentId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model User {
  id                       String          @id @default(uuid())
  email                    String          @unique
  password                 String
  name                     String
  createdAt                DateTime        @default(now())
  role                     Role
  updatedAt                DateTime        @updatedAt
  username                 String          @unique
  isActive                 Boolean         @default(true)
  studentDetails           StudentDetails?
  staffDetails             StaffDetails?
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
}

model Result {
  id         String         @id @default(uuid())
  studentId  String
  student    StudentDetails @relation("StudentResults", fields: [studentId], references: [id])
  semester   Int
  resultFile Bytes
  uploadedAt DateTime       @default(now())
  isRepeater Boolean        @default(false)
}

model StudentDetails {
  id                 String                  @id
  email              String
  username           String                  @unique
  name               String
  fatherName         String?
  motherName         String?
  enrollmentNumber   String?                 @unique
  courseName         String?
  batchName          String?
  dateOfBirth        DateTime?
  gender             String?
  bloodGroup         String?
  contactNo          String?
  address            String?
  city               String?
  state              String?
  pinCode            Int?
  achievements       Json?
  isActive           Boolean                 @default(true)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  isProfileCompleted Boolean                 @default(false)
  isSemesterUpdated  Boolean                 @default(true)
  user               User                    @relation(fields: [id], references: [id])
  course             Course?                 @relation(fields: [courseName], references: [courseName])
  batch              Batch?                  @relation(fields: [batchName], references: [batchName])
  electiveChoices    ElectiveSubjectChoice[]
  results            Result[]                @relation("StudentResults")
  attendances        Attendance[]
  leaves             Leave[]
}

model AttendanceSettings {
  id                 String   @id @default(uuid())
  subjectId          String
  batchId            String
  lecturesPerWeek    Int
  labsPerWeek        Int
  hasLabs            Boolean  @default(false)
  lectureDays        String
  labDays            String
  sessionStartDate   DateTime
  sessionEndDate     DateTime
  attendanceSchedule String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  subject            Subject  @relation("SubjectAttendanceSettings", fields: [subjectId], references: [subjectId])
  batch              Batch    @relation("BatchAttendanceSettings", fields: [batchId], references: [batchId])

  @@unique([subjectId, batchId])
}

model StaffDetails {
  id                 String       @id
  email              String
  username           String
  name               String
  isBatchCoordinator Boolean?   @default(false)
  batchId            String?
  dateOfBirth        DateTime?
  gender             String?
  subjects           Subject[]
  contactNo          String?
  achievements       Json?
  address            String?
  city               String?
  state              String?
  pinCode            Int?
  isActive           Boolean      @default(true)
  isProfileCompleted Boolean      @default(false)
  isSemesterUpdated  Boolean      @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  user               User         @relation(fields: [id], references: [id])
  batch              Batch?       @relation(fields: [batchId], references: [batchId])
  attendances        Attendance[]
  timetable          Bytes?
  
}

model Subject {
  subjectId             String                  @id @default(uuid())
  subjectName           String
  subjectCode           String                  @unique
  semester              Int
  courseId              String
  isElective            Boolean                 @default(false)
  course                Course                  @relation(fields: [courseId], references: [courseId])
  electiveGroup         ElectiveGroup?          @relation(fields: [electiveGroupId], references: [electiveGroupId])
  electiveGroupId       String?
  staff                 StaffDetails[]
  batches               BatchSubject[]
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ElectiveSubjectChoice ElectiveSubjectChoice[]
  attendances           Attendance[]
  attendanceSettings    AttendanceSettings[]    @relation("SubjectAttendanceSettings")
}

model Course {
  courseId       String           @id @default(uuid())
  courseName     String           @unique
  duration       Int
  subjects       Subject[]
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  batches        Batch[]
  StudentDetails StudentDetails[]
  ElectiveGroup  ElectiveGroup[]
}

model Batch {
  batchId         String           @id @default(uuid())
  batchName       String           @unique
  courseId        String
  batchDuration   Int
  currentSemester Int
  students        StudentDetails[]
  staffMembers    StaffDetails[]
  subjects        BatchSubject[]
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  course          Course           @relation(fields: [courseId], references: [courseId])
  timetable       Bytes?
  staffId         String?

  attendances         Attendance[]
  attendanceSettings  AttendanceSettings[] @relation("BatchAttendanceSettings")
}

model BatchSubject {
  id        String   @id @default(uuid())
  batchId   String
  semester  Int?
  subjectId String
  staffId   String?
  batch     Batch    @relation(fields: [batchId], references: [batchId])
  subject   Subject  @relation(fields: [subjectId], references: [subjectId])

  @@unique([batchId, subjectId])
}

model Attendance {
  id        String         @id @default(uuid())
  studentId String
  subjectId String
  batchId   String
  date      DateTime
  isPresent Boolean
  type      AttendanceType
  staff     StaffDetails   @relation(fields: [staffId], references: [id])
  staffId   String
  student   StudentDetails @relation(fields: [studentId], references: [id])
  subject   Subject        @relation(fields: [subjectId], references: [subjectId])
  batch     Batch          @relation(fields: [batchId], references: [batchId])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ElectiveGroup {
  electiveGroupId       String                  @id @default(uuid())
  groupName             String
  courseId              String
  semester              Int
  isActive              Boolean                 @default(true)
  subjects              Subject[]
  course                Course                  @relation(fields: [courseId], references: [courseId])
  ElectiveSubjectChoice ElectiveSubjectChoice[]
}

model ElectiveSubjectChoice {
  id              String         @id @default(uuid())
  studentId       String
  electiveGroupId String
  subjectId       String
  student         StudentDetails @relation(fields: [studentId], references: [id])
  subject         Subject        @relation(fields: [subjectId], references: [subjectId])
  electiveGroup   ElectiveGroup  @relation(fields: [electiveGroupId], references: [electiveGroupId])
}

enum AttendanceType {
  Lecture
  Lab
}

enum Role {
  Admin
  Staff
  PO
  Student
}