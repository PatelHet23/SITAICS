generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  name           String
  createdAt      DateTime        @default(now())
  role           Role
  updatedAt      DateTime        @updatedAt
  username       String          @unique 
  isActive       Boolean         @default(true)
  studentDetails StudentDetails?
  staffDetails   StaffDetails?
}

model StudentDetails {
  id                 String    @id
  email              String
  username           String    @unique
  name               String
  fatherName         String?
  motherName         String?
  enrollmentNumber   String?   @unique
  courseName         String?
  batchName          String?
  dateOfBirth        DateTime?
  gender             String?
  bloodGroup         String?
  contactNo          String?
  address            String?
  city               String?
  state              String?
  pinCode            Int?
  achievements       String?
  results            Json?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isProfileCompleted Boolean   @default(false)
  user               User      @relation(fields: [id], references: [id])
  course             Course?   @relation(fields: [courseName], references: [courseName])
  batch              Batch?    @relation(fields: [batchName], references: [batchName])
}

model StaffDetails {
  id                 String    @id
  email              String
  username           String
  name               String
  isBatchCoordinator Boolean   @default(false)
  batchId            String?
  subjects           Subject[]
  contactNumber      String?
  achievements       String?
  isActive           Boolean   @default(true)
  isProfileCompleted Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [id], references: [id])
  batch              Batch?    @relation(fields: [batchId], references: [batchId])
}

model Subject {
  subjectId   String         @id @default(uuid())
  subjectName String
  subjectCode String
  semester    Int
  courseId    String
  course      Course         @relation(fields: [courseId], references: [courseId])
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  staff       StaffDetails[]
  batches     BatchSubject[]
}

model Course {
  courseId       String           @id @default(uuid())
  courseName     String           @unique
  subjects       Subject[]
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  batches        Batch[]
  StudentDetails StudentDetails[]
}

model Batch {
  batchId         String           @id @default(uuid())
  batchName       String           @unique
  courseId        String
  batchDuration   Int
  currentSemester Int
  students        StudentDetails[]
  staffMembers    StaffDetails[]
  subjects        BatchSubject[]
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  course          Course           @relation(fields: [courseId], references: [courseId])
}

model BatchSubject {
  batchId   String
  subjectId String
  semester  Int
  batch     Batch   @relation(fields: [batchId], references: [batchId])
  subject   Subject @relation(fields: [subjectId], references: [subjectId])

  @@id([batchId, subjectId])
}

enum Role {
  Admin
  Staff
  PO
  Student
}